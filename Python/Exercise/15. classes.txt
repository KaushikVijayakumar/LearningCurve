# Example for classes

class Fruit(object):
    """A class that makes various tasty fruits."""
    def __init__(self, name, color, flavor, poisonous):
        self.name = name
        self.color = color
        self.flavor = flavor
        self.poisonous = poisonous

    def description(self):
        print "I'm a %s %s and I taste %s." % (self.color, self.name, self.flavor)

    def is_edible(self):
        if not self.poisonous:
            print "Yep! I'm edible."
        else:
            print "Don't eat me! I am super poisonous."

lemon = Fruit("lemon", "yellow", "sour", False)

lemon.description()
lemon.is_edible()






#Example 2: test
class Animal(object):
    """Makes cute animals."""
    is_alive = True
    def __init__(self, name, age):
        self.name = name
        self.age = age

zebra = Animal("Jeffrey", 2)
giraffe = Animal("Bruce", 1)
panda = Animal("Chad", 7)

print zebra.name, zebra.age, zebra.is_alive
print giraffe.name, giraffe.age, giraffe.is_alive
print panda.name, panda.age, panda.is_alive




# example 3: 
class Animal(object):
    """Makes cute animals."""
    is_alive = True
    def __init__(self, name, age):
        self.name = name
        self.age = age
    # Add your method here!
    def description(self):
        print self.name
        print self.age

hippo = Animal("jacob","222")

# class calling as below:
Animal('Baloo', 1).description()




#printing details 

class Animal(object):
    """Makes cute animals."""
    is_alive = True
    health = 'good'
    def __init__(self, name, age):
        self.name = name
        self.age = age
    # Add your method here!
    def description(self):
        #print self.name
        #print self.age
        print self.health

hippo = Animal("hippp","1")
sloth = Animal("thhhhh","2")
ocelot = Animal("occcc","3")
        
print hippo.health
print sloth.health
print ocelot.health





#Example 4:
class ShoppingCart(object):
    """Creates shopping cart objects
    for users of our fine website."""
    items_in_cart = {}
    def __init__(self, customer_name):
        self.customer_name = customer_name

    def add_item(self, product, price):
        """Add product to the cart."""
        if not product in self.items_in_cart:
            self.items_in_cart[product] = price
            print product + " added."
        else:
            print product + " is already in the cart."

    def remove_item(self, product):
        """Remove product from the cart."""
        if product in self.items_in_cart:
            del self.items_in_cart[product]
            print product + " removed."
        else:
            print product + " is not in the cart."

my_cart = ShoppingCart('kaushik')
my_cart.add_item('lappie', '999')






# Example for inheheritance:
class Customer(object):
    """Produces objects that represent customers."""
    def __init__(self, customer_id):
        self.customer_id = customer_id

    def display_cart(self):
        print "I'm a string that stands in for the contents of your shopping cart!"

class ReturningCustomer(Customer):
    """For customers of the repeat variety."""
    def display_order_history(self):
        print "I'm a string that stands in for your order history!"

monty_python = ReturningCustomer("ID: 12345")
monty_python.display_cart()
monty_python.display_order_history()




# Exmaple: Inheritance andoveriding a functions (using the same function but different body
class Employee(object):
    """Models real-life employees!"""
    def __init__(self, employee_name):
        self.employee_name = employee_name

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 20.00

# Add your code below!
class PartTimeEmployee(Employee):
    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 12.00









## using super class:
class Employee(object):
    """Models real-life employees!"""
    def __init__(self, employee_name):
        self.employee_name = employee_name

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 20.00

# Add your code below!
class PartTimeEmployee(Employee):
   
    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 12.00
    
    def full_time_wage (self, hours):
        return super(PartTimeEmployee, self).calculate_wage(hours)

milton=PartTimeEmployee("Milton")
print milton.calculate_wage(10)
print milton.full_time_wage(10)




# check if it is atriangle
class Triangle(object):
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

    number_of_sides = 3

    def check_angles(self):
        sum_all_angles = self.angle1 + self.angle2 + self.angle3
        if sum_all_angles == 180:
            return True
        else:
            return False

my_triangle = Triangle(90, 30, 60)

print my_triangle.number_of_sides
print my_triangle.check_angles()



## Access valriables of a class:
class Car(object):
    condition ='new'

my_car = Car()
print my_car.condition




# little upgrade
class Car(object):
    condition ='new'
    def __init__(self, model, color, mpg):
        self.model= model
        self.color= color
        self.mpg = mpg
        
my_car = Car('DeLorean','silver','88')
print my_car.condition





######
class Car(object):
    condition ='new'
    def __init__(self, model, color, mpg):
        self.model= model
        self.color= color
        self.mpg = mpg
        
my_car = Car('DeLorean','silver',88)
print my_car.condition
print my_car.model
print my_car.color
print my_car.mpg







# playing with class
class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
    
    def display_car(self):
        print 'This is a %s %s with %s MPG.' % (self.color, self.model, str(self.mpg))
    
    def drive_car(self):
        self.condition = 'used'

my_car = Car("DeLorean", "silver", 88)

print my_car.condition
print my_car.drive_car()
print my_car.condition





# play: 
class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
    
    def display_car(self):
        print 'This is a %s %s with %s MPG.' % (self.color, self.model, str(self.mpg))
    
    def drive_car(self):
        self.condition = 'used'

class ElectricCar(Car):
    def __init__(self, model, color, mpg, battery_type):
        self.model = model
        self.color = color
        self.mpg   = mpg
        self.battery_type =battery_type
    
    def drive_car(self):
        self.condition = 'like new'


my_car = ElectricCar("DeLorean", "silver", 88,'molten salt')
print my_car.condition
print my_car.drive_car()
print my_car.condition





# example:
class Point3D(object):
    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z

    def __repr__(self):
        return "(%i, %i, %i)"%(self.x,self.y,self.z)

my_point = Point3D(1,2,3)
print my_point
